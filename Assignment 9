- Briefly describe the concept of "Stack Frame" (1 through 5 points depending on quality of the answer)
  Hint: https://en.wikipedia.org/wiki/X86_calling_conventions
    The stack allows data to be pushed onto it while being used until the software has completed using it at 
    which time it is popped from the stack.

- Briefly describe the concept of a "Calling Convention" (1 through 5 points depending on quality of the answer)
    The different conventions all control how parameters are passed and values returned.

- Why do the book examples always start functions with "push ebp" and "mov ebp,esp" (2 points)
    So that all the stack content is saved/released before pushing and popping new data. 

- What is the x64 equivalent to "push epb" and "mov ebp,esp)" (2 points)
    There would be no difference.

- What are the differences between "Microsoft x64 calling convention" and "System V AMD64 ABI calling convention" (2 points)
  Hint: https://en.wikipedia.org/wiki/X86_calling_conventions
    Microsoft x64 follows Windows and UEFI systems while System V follows Solaris, Linux, FreeBSD, and MacOS.

void myFunction(int a, int b, int c, int d, int e, int f)  {
  //some code here
}
- Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? (3 points)
  Hint: https://docs.microsoft.com/en-us/cpp/build/parameter-passing
    a in RCX, b in RDX, c in R8, d in R9, e and f pushed on stack

- Upon entry to myFunction (above), what does the stack look like when using stdcall convention (3 points)
  Hint: https://en.wikipedia.org/wiki/X86_calling_conventions
    f in RCX, e in RDX, d in R8, c in R9, b and a pushed on the stack

Upload your assignment to GitHub
Email james.wilson@rccd.edu with the url to the source code on GitHub
*** 22 points ***
